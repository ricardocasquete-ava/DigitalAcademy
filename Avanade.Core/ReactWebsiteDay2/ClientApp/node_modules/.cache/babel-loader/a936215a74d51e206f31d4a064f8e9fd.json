{"ast":null,"code":"import { toast } from 'react-toastify'; //Declare Global Model\n\nvar consoleEnabled = true; //false;\n\nvar consoleLevel = \"Info\"; //Trace, Info, Data\n\nvar consoleConfigured = false;\nvar consoleBuffer = []; //Used to store the log messages prior to console being configured\n//Common Helper Functions\n//  -> Console\n//  -> Data API\n//  -> UI Helpers (Message, Confirm...)\n\nconst Common = {\n  init: function () {\n    if (!window.console) window.console = {};\n    if (!window.console.log) window.console.log = function () {};\n  },\n  //#region Message Log\n  setLog: function (logConfiguration) {\n    consoleEnabled = logConfiguration.consoleEnabled;\n    consoleLevel = logConfiguration.consoleLevel;\n\n    if (consoleEnabled) {\n      consoleBuffer.forEach(item => {\n        Common.writeLog(item.message);\n      });\n    } //Empty the buffer\n\n\n    consoleBuffer = [];\n  },\n  trace: function (message, params) {\n    this.writeLog(\"Trace\", message, params);\n  },\n  traceInit: function (component) {\n    this.writeLog(\"Init Trace\", component);\n  },\n  log: function (message, params) {\n    this.writeLog(null, message, params);\n  },\n  logError: function (message, params) {\n    this.writeLog(\"Error\", message, params);\n  },\n  data: function (message, params) {\n    this.writeLog(\"Data\", message, params);\n  },\n  writeLog: function (level, message, params) {\n    //Form Message\n    if (params != null && params.length > 0) {\n      var i = params.length;\n\n      while (i--) {\n        message = message.replace(new RegExp('\\\\{' + i + '\\\\}', 'gm'), params[i]);\n      }\n    }\n\n    if (level != null) {\n      message = level + \". \" + message;\n    } //While the console is being configured. Messages are stored in a temporal buffer\n\n\n    if (!consoleConfigured) {\n      consoleBuffer.push({\n        message: message\n      });\n    }\n\n    if (consoleEnabled) {\n      if (window.console && window.console.log) {\n        if (consoleEnabled) {\n          window.console.log(message);\n        }\n      }\n    }\n  },\n  //#endregion\n  //#region Invoke Call \n  call: async function (url, requestParameter, callback, callbackData, callbackError) {\n    Common.data(\"Call URL -> {0}\", [url]);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestParameter)\n    }).catch(err => {\n      Common.data(\"Call Catch Error Block {0} -> \", [url]);\n      Common.log(err);\n    });\n    const apiResponse = await response.json();\n    Common.data(\"Common.Call API Response -> {0}\", [url]);\n    Common.log(apiResponse);\n\n    if (apiResponse.success === true) {\n      if (callbackData && callbackData.successMessage) {\n        Common.success(callbackData.successMessage);\n      }\n\n      if (callback != null) {\n        callback(apiResponse.data, callbackData, apiResponse);\n      }\n    } else {\n      Common.data(\"Common.Call Failed {0} -> \", [url]);\n\n      if (callbackData && callbackData.errorMessage) {\n        Common.error(callbackData.errorMessage);\n      }\n\n      if (apiResponse.errors != null) {\n        var error;\n\n        for (error in apiResponse.errors) {\n          if (apiResponse.errors[error] != null && apiResponse.errors[error].length > 0) {\n            Common.error(apiResponse.errors[error]);\n          } else {\n            Common.error(error);\n          }\n        }\n      } else {\n        Common.error(\"Operation Failed. Reach Administrator for more information.\");\n      }\n\n      if (callbackError != null) {\n        Common.data(\"Common.Call Callback Error\");\n        callbackError(callbackData, apiResponse.data);\n      }\n    }\n  },\n  //#endregion\n  //#region UI Messages\n  success: function (message) {\n    toast.success(message, {\n      position: \"top-right\",\n      autoClose: 8000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  },\n  error: function (message) {\n    toast.error(message, {\n      position: \"top-right\",\n      autoClose: 10000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  },\n\n  //#endregion\n  //#region Images\n  ImportAllImagesInFolder(r) {\n    let imageArray = [];\n    r.keys().map(r).map((item, index) => {\n      imageArray.push({\n        src: item,\n        header: '',\n        key: index,\n        caption: '',\n        altText: ''\n      });\n      return false;\n    });\n    return imageArray;\n  } //#endregion\n\n\n};\nexport default Common;","map":{"version":3,"sources":["C:/_Source/Repos/Demos/DigitalAcademy/Avanade.Core/ReactWebsite/ClientApp/src/controls/Common.js"],"names":["toast","consoleEnabled","consoleLevel","consoleConfigured","consoleBuffer","Common","init","window","console","log","setLog","logConfiguration","forEach","item","writeLog","message","trace","params","traceInit","component","logError","data","level","length","i","replace","RegExp","push","call","url","requestParameter","callback","callbackData","callbackError","response","fetch","method","headers","body","JSON","stringify","catch","err","apiResponse","json","success","successMessage","errorMessage","error","errors","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ImportAllImagesInFolder","r","imageArray","keys","map","index","src","header","key","caption","altText"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\n\r\n//Declare Global Model\r\nvar consoleEnabled = true;//false;\r\nvar consoleLevel = \"Info\"; //Trace, Info, Data\r\n\r\nvar consoleConfigured = false;\r\nvar consoleBuffer = [];//Used to store the log messages prior to console being configured\r\n\r\n//Common Helper Functions\r\n//  -> Console\r\n//  -> Data API\r\n//  -> UI Helpers (Message, Confirm...)\r\nconst Common = {\r\n\r\n    init: function () {\r\n\r\n        if (!window.console) window.console = {};\r\n        if (!window.console.log) window.console.log = function () { };\r\n    },\r\n\r\n    //#region Message Log\r\n\r\n    setLog: function (logConfiguration) {\r\n        consoleEnabled = logConfiguration.consoleEnabled;\r\n        consoleLevel = logConfiguration.consoleLevel;\r\n\r\n        if (consoleEnabled) {\r\n            consoleBuffer.forEach(item => {\r\n                Common.writeLog(item.message);\r\n            });\r\n        }\r\n        //Empty the buffer\r\n        consoleBuffer = [];\r\n    },\r\n\r\n    trace: function (message, params) {\r\n        this.writeLog(\"Trace\", message, params);\r\n    },\r\n\r\n    traceInit: function (component) {\r\n        this.writeLog(\"Init Trace\", component);\r\n    },\r\n\r\n    log: function (message, params) {\r\n        this.writeLog(null, message, params);\r\n    },\r\n\r\n    logError: function (message, params) {\r\n        this.writeLog(\"Error\", message, params);\r\n    },\r\n\r\n    data: function (message, params) {\r\n        this.writeLog(\"Data\", message, params);\r\n    },\r\n\r\n    writeLog: function (level, message, params) {\r\n\r\n        //Form Message\r\n        if ((params != null) && (params.length > 0)) {\r\n            var i = params.length;\r\n            while (i--) {\r\n                message = message.replace(new RegExp('\\\\{' + i + '\\\\}', 'gm'), params[i]);\r\n            }\r\n        }\r\n        if (level != null) {\r\n            message = level + \". \" + message;\r\n        }\r\n\r\n        //While the console is being configured. Messages are stored in a temporal buffer\r\n        if (!consoleConfigured) {\r\n            consoleBuffer.push({ message: message });\r\n        }\r\n\r\n        if (consoleEnabled) {\r\n           if (window.console && window.console.log) {\r\n                if (consoleEnabled) {\r\n                    window.console.log(message);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //#endregion\r\n\r\n    //#region Invoke Call \r\n\r\n    call: async function (url, requestParameter, callback, callbackData, callbackError) {\r\n\r\n        Common.data(\"Call URL -> {0}\", [url]);\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestParameter)\r\n        }).catch((err) => {\r\n            Common.data(\"Call Catch Error Block {0} -> \", [url]);\r\n            Common.log(err);\r\n        });\r\n\r\n        const apiResponse = await response.json();\r\n\r\n        Common.data(\"Common.Call API Response -> {0}\", [url]);\r\n        Common.log(apiResponse);\r\n\r\n        if (apiResponse.success === true) {\r\n\r\n            if ((callbackData) && (callbackData.successMessage)) {\r\n                Common.success(callbackData.successMessage);\r\n            }\r\n\r\n            if (callback != null) {\r\n                callback(apiResponse.data, callbackData, apiResponse);\r\n            }\r\n        } else {\r\n            Common.data(\"Common.Call Failed {0} -> \", [url]);\r\n\r\n            if ((callbackData) && (callbackData.errorMessage)) {\r\n                Common.error(callbackData.errorMessage);\r\n            }\r\n\r\n            if (apiResponse.errors != null) {\r\n                var error;\r\n                for (error in apiResponse.errors) {\r\n                    if ((apiResponse.errors[error] != null) && (apiResponse.errors[error].length > 0)) {\r\n                        Common.error(apiResponse.errors[error]);\r\n                    } else {\r\n                        Common.error(error);\r\n                    }\r\n                }\r\n            } else {\r\n                Common.error(\"Operation Failed. Reach Administrator for more information.\");\r\n            }\r\n\r\n            if (callbackError != null) {\r\n                Common.data(\"Common.Call Callback Error\");\r\n                callbackError(callbackData, apiResponse.data);\r\n            }\r\n        }\r\n    },\r\n\r\n    //#endregion\r\n\r\n    //#region UI Messages\r\n\r\n    success: function (message) {\r\n\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 8000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n    },\r\n    error: function (message) {\r\n\r\n        toast.error(message, {\r\n            position: \"top-right\",\r\n            autoClose: 10000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n    },\r\n\r\n    //#endregion\r\n\r\n    //#region Images\r\n\r\n    ImportAllImagesInFolder(r) {\r\n        let imageArray = [];\r\n        r.keys().map(r).map((item, index) => { imageArray.push({ src: item, header: '', key: index, caption: '', altText: '' }); return false; });\r\n        return imageArray;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default Common;\r\n\r\n"]},"metadata":{},"sourceType":"module"}